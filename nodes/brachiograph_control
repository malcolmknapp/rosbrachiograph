#!/usr/bin/env python3

# creates a ros node that controls two servo motors
# on a arduino running ros serial
# ---------------
# by malcolm knapp
# github.com/malcolmknap
# malcolm@mfhkconsulting.com
# 041421
# adapted from head_motor_control.py by oran collins

import rospy
import math
import shlex
import argparse


from std_msgs.msg import String
from rosbrachiograph.msg import ServoPosition
from rosbrachiograph.msg import PenPosition
from geometry_msgs.msg import Twist
from rosbrachiograph.brachiograph import BrachioGraph
from rosbrachiograph.brachiograph import Pen

global shoulder_servo
global elbow_servo
global pen_servo
global sub
global shoulder_servo_position
global elbow_servo_position
global pen_servo_position
#global jog_size


#current positins
pen_current_pos = 245
elbow_current_pos = 245
shoulder_current_pos = 312

# standard delay between moving the joints
DELAY = 1.0
# setting up interger variables
#     the arduino only accepts integers
jog_msg = ServoPosition ()
pen_msg = PenPosition ()

shoulder_min = 100  # in degrees from x to y angles are accepted positions
sholder_max = 400
elbow_min = 100
elbow_max = 500
pen_max = 110
pen_min = 500
state = "idle"
event = "none"
shoulder_angle = -90
elbow_angle = 90


#calibration
servo_1_angle_pws1 = [
    [-216,488],
    [-198,447],
    [-180,408],
    [-162,369],
    [-144,332],
    [-126,298],
    [-108,272],
    [-90,235],
    [-72,197],
    [-54,165],
    [-36,130],
]
servo_2_angle_pws2 = [
    [0,472],
    [18,438],
    [36,400],
    [54,358],
    [72,320],
    [90,280],
    [108,242],
    [126,202],
    [144,170],
    [162,135],
    [180,100],
]

# helper function
# keeps the input number between a high and alow
def constrain(input: float, low: float, high: float) -> float:
    """
    input: radian float  an number to be constrained to a range low<-> high
    low: radian float minimum value the input can be
    high: radian float maximum value the input can be
    """
    return max(min(input, high), low)

def homing():
    shoulder_home_pos = 225
    elbow_home_pos = 300
    pen_home_pos = 300

    global shoulder_current_pos 
    global elbow_current_pos
    global pen_current_pos

    shoulder_current_pos = shoulder_home_pos
    elbow_current_pos = elbow_home_pos
    pen_current_pos = pen_home_pos

    jog_msg.shoulder_pos = shoulder_home_pos
    jog_msg.elbow_pos = elbow_home_pos
    pen_msg.pen_pos = pen_home_pos
    rospy.loginfo("Home positions %s", jog_msg)
    rospy.loginfo("Home position %s", pen_msg)
    jog_servo.publish(jog_msg)
    jog_pen.publish(pen_msg)
    rospy.sleep(DELAY)

def move_pen(move="up"):
    global pen_current_pos

    if move == "up":
        pen_msg.pen_pos = pen_current_pos = bg.pen.pw_up
        rospy.loginfo("Move pen up to {}".format (pen_current_pos))
    if move == "down":
        pen_msg.pen_pos = pen_current_pos = bg.pen.pw_down
        rospy.loginfo("Move pen down to {}".format (pen_current_pos))
    jog_pen.publish(pen_msg)
    rospy.sleep(DELAY)

#jog the brachiograph manually
def jog_position(msg: Twist) -> None:
    #rospy.loginfo("current x,y:  {},{}".format (round (bg.current_x,3) ,round (bg.current_y,3)))
    jog_size_xy = .5
    jog_size_pw = 10
    new_x = -8
    new_y = 4.2

    if state == "jog_xy":
        if msg.angular.z < 0:
            new_x = bg.current_x - jog_size_xy
        if msg.angular.z > 0: 
            new_x = bg.current_x + jog_size_xy
        if msg.linear.x < 0:
            new_y = bg.current_y - jog_size_xy
        if msg.linear.x > 0:
            new_y = bg.current_y + jog_size_xy
        bg.xy(new_x, new_y) 
        rospy.sleep(DELAY)

    if state == "jog_pw":
        global shoulder_current_pos
        global elbow_current_pos
        #rospy.loginfo("state %s", state) 
        rospy.loginfo("teleop msg:\n %s",msg)

        if msg.angular.z < 0:
            shoulder_current_pos = shoulder_current_pos - jog_size_pw
            #rospy.loginfo("Shoulder -\r")
        if msg.angular.z > 0:
            shoulder_current_pos = shoulder_current_pos + jog_size_pw
            #rospy.loginfo("Shoulder +\r")
        if msg.linear.x < 0:
            elbow_current_pos = elbow_current_pos - jog_size_pw
            #rospy.loginfo("Elbow -")
        if msg.linear.x > 0:
            elbow_current_pos = elbow_current_pos + jog_size_pw
            #rospy.loginfo("Elbow +")
        
        jog_msg.shoulder_pos = shoulder_current_pos
        jog_msg.elbow_pos = elbow_current_pos

        rospy.loginfo("Current servo positions %s", jog_msg)
        jog_servo.publish(jog_msg)
        rospy.sleep(DELAY)

def cmd_parse(msg:String) -> None:
    global state
    global event
    global shoulder_angle
    global elbow_angle
    global point_x
    global point_y

    rospy.loginfo("parsing command")
    parser = argparse.ArgumentParser (description = "ros brachiograph cli")
    parser.add_argument("cmd")

    #pen command
    parser.add_argument("-u", "--up", action="store_true")
    parser.add_argument("-d", "--down", action="store_true")
    parser.add_argument("--done", action="store_true")
    
    #test command 
    parser.add_argument("-l", "--line", action="store_true")
    parser.add_argument("-b", "--box", action="store_true")
    parser.add_argument("-g", "--grid", action="store_true")
    parser.add_argument("-a", "--angle",nargs=2,  type=int)
    parser.add_argument("-p", "--point",nargs=2,  type=int) 
    parser.add_argument("-t", "--pattern", action="store_true")

    args = parser.parse_args(shlex.split(msg.data))
    rospy.loginfo(msg.data)  

    if args.cmd == "home":
        state = "homing"
        rospy.loginfo("homing brachiograph")

    if args.cmd == "pen":
        if args.up:
            event = "up"
            rospy.loginfo("pen up")
        if args.down:
            event = "down"
            rospy.loginfo("pen down")

    if args.cmd == "jog_xy":
        state = "jog_xy"
        if args.done:
            state = "idle"
            rospy.loginfo("done jogging")
        else:
            rospy.loginfo(" Now jogging xy")
    if args.cmd == "jog_pw":
        state = "jog_pw"
        if args.done:
            state = "idle"
            rospy.loginfo("done jogging")
        else:
            rospy.loginfo(" Now jogging pw")

    if args.cmd == "test":
        if args.line:
            state = "line"
            rospy.loginfo("testing line")
    if args.cmd == "test":
        if args.angle:
            state = "angle"
            shoulder_angle = args.angle[0]
            elbow_angle = args.angle[1]
            rospy.loginfo("test go to angle: shoulder {}, elblow {}".format (shoulder_angle,elbow_angle))
        if args.box:
            state = "box"
            rospy.loginfo("test drawing a box")
        if args.grid:
            state = "grid"
            rospy.loginfo("drawing test grid\n")
        if args.point:
            state = "point"
            point_x = args.point[0]
            point_y = args.point[1]
            rospy.loginfo("test go to point: x {}, y {}".format (point_x,point_y))
        if args.pattern:
            state = "pattern"
            rospy.loginfo("drawing a test pattern")
            
if __name__ == "__main__":
    rospy.init_node("brachiograph_control_node")

    # setup topics to control into arduino servo angles
    # publishing a integer between pulse width 50 - 400 
    jog_servo = rospy.Publisher("jog_servo", ServoPosition, queue_size=1)
    jog_pen = rospy.Publisher("jog_pen", PenPosition, queue_size=1)
    sub = rospy.Subscriber("/cmd_vel", Twist, jog_position)
    sub = rospy.Subscriber("/cli", String, cmd_parse)
    test_bounds = [-8, 7, -4, 1]
    bg = BrachioGraph(
        # the lengths of the arms
        inner_arm=8,
        outer_arm=4.2,
        servo_1_centre=245,        # shoulder motor centre pulse-width
        servo_2_centre=320,        # elbow motor centre pulse-width
        # the drawing area
        bounds=test_bounds,
        # angles in degrees and corresponding pulse-widths for the two arm servos
        #servo_1_angle_pws=servo_1_angle_pws1,
        #servo_2_angle_pws=servo_2_angle_pws2,
        servo_1_degree_ms=-2,      # shoulder servo conversion. milliseconds pulse-width per degree
        servo_2_degree_ms=2,       # elbow servo conversion. Reversed to compensate for mounting. milliseconds pulse-width per degree
        arm_1_centre=-90,
        arm_2_centre=94,
        # pulse-widths for pen up/down
        hysteresis_correction_1=0,  # hardware error compensation
        hysteresis_correction_2=0,
        wait=1,
        pw_down=110,
        pw_up=350
        )

    rate = rospy.Rate(10)
    print("Control is Running")
    while not rospy.is_shutdown():
        if state == "homing" :
            bg.park ()
            state = "idle"
        if state == "idle":
            if event == "up":
                move_pen ("up")
                event = "none"
            if event == "down":
                move_pen ("down") 
                event = "none"
        if state == "angle" :
            bg.set_angles(angle_1=shoulder_angle, angle_2=elbow_angle)
            state = "idle"          
        if state == "line" :
            bg.vertical_lines(bounds = test_bounds, wait = 10, interpolate = 20)
            state = "idle"
        if state == "box":
            bg.box(bounds = test_bounds, wait = 1, interpolate = 10 )
            state = "idle"
        if state == "grid":
            bg.grid_lines(bounds = test_bounds, wait = 1, interpolate = 10 )
            state = "idle"
        if state == "point":
            bg.xy(x=point_x, y=point_y, wait = 1, interpolate = 10 )
            state = "idle"
        if state == "pattern":
            bg.test_pattern(bounds = test_bounds, wait = 1, interpolate = 10)
            state = "idle"

        rate.sleep()